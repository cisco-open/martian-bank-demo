"""Copyright (c) 2023 Cisco Systems, Inc. and its affiliates All rights reserved.
 Use of this source code is governed by a BSD-style
 license that can be found in the LICENSE file.
 Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
Client and server classes corresponding to protobuf-defined services.
Client and server classes corresponding to protobuf-defined services."""
import grpc
import transaction_pb2 

class TransactionServiceStub:
    """Stub for the TransactionService.

    This class provides methods to call the RPCs provided by the TransactionService.
    """

    def __init__(self, channel):
        """Construct a stub for the TransactionService.

        Args:
            channel: A grpc.Channel.
        """
        self.send_money = channel.unary_unary(
            '/TransactionService/sendMoney',
            request_serializer=transaction_pb2.TransactionRequest.SerializeToString,
            response_deserializer=transaction_pb2.TransactionResponse.FromString,
        )
        self.get_transactions_history = channel.unary_unary(
            '/TransactionService/getTransactionsHistory',
            request_serializer=transaction_pb2.GetALLTransactionsRequest.SerializeToString,
            response_deserializer=transaction_pb2.GetALLTransactionsResponse.FromString,
        )
        self.zelle = channel.unary_unary(
            '/TransactionService/Zelle',
            request_serializer=transaction_pb2.ZelleRequest.SerializeToString,
            response_deserializer=transaction_pb2.TransactionResponse.FromString,
        )
        self.get_transaction_by_id = channel.unary_unary(
            '/TransactionService/getTransactionByID',
            request_serializer=transaction_pb2.TransactionByIDRequest.SerializeToString,
            response_deserializer=transaction_pb2.Transaction.FromString,
        )


class TransactionServiceServicer:
    """Servicer for the TransactionService.

    This class implements the service methods defined in the TransactionService.
    """

    def send_money(self, request, context):
        """Send money to a specified account.

        This method is not yet implemented.

        Args:
            request: The request containing transaction details.
            context: The context of the transaction.

        Raises:
            NotImplementedError: Indicates method is not implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_transactions_history(self, request, context):
        """Get the transaction history of an account.

        This method is not yet implemented.

        Args:
            request: The request for transaction history.
            context: The context of the transaction.

        Raises:
            NotImplementedError: Indicates method is not implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def zelle(self, request, context):
        """Perform a Zelle transaction.

        This method is not yet implemented.

        Args:
            request: The request containing Zelle transaction details.
            context: The context of the transaction.

        Raises:
            NotImplementedError: Indicates method is not implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_transaction_by_id(self, request, context):
        """Get a transaction by its ID.

        This method is not yet implemented.

        Args:
            request: The request containing the transaction ID.
            context: The context of the transaction.

        Raises:
            NotImplementedError: Indicates method is not implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_transaction_service_servicer_to_server(servicer, server):
    """Register the TransactionServiceServicer to a gRPC server.

    Args:
        servicer: The servicer instance to register.
        server: The gRPC server.
    """
    rpc_method_handlers = {
        'sendMoney': grpc.unary_unary_rpc_method_handler(
            servicer.send_money,
            request_deserializer=transaction_pb2.TransactionRequest.FromString,
            response_serializer=transaction_pb2.TransactionResponse.SerializeToString,
        ),
        'getTransactionsHistory': grpc.unary_unary_rpc_method_handler(
            servicer.get_transactions_history,
            request_deserializer=transaction_pb2.GetALLTransactionsRequest.FromString,
            response_serializer=transaction_pb2.GetALLTransactionsResponse.SerializeToString,
        ),
        'Zelle': grpc.unary_unary_rpc_method_handler(
            servicer.zelle,
            request_deserializer=transaction_pb2.ZelleRequest.FromString,
            response_serializer=transaction_pb2.TransactionResponse.SerializeToString,
        ),
        'getTransactionByID': grpc.unary_unary_rpc_method_handler(
            servicer.get_transaction_by_id,
            request_deserializer=transaction_pb2.TransactionByIDRequest.FromString,
            response_serializer=transaction_pb2.Transaction.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'TransactionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))



class TransactionService:
    """Provides static methods for client-side gRPC calls to TransactionService."""

    @staticmethod
    def send_money(request, target, options=(), channel_credentials=None,
                   call_credentials=None, insecure=False, compression=None,
                   wait_for_ready=None, timeout=None, metadata=None):
        """Send money to a specified account.

        Args:
            request: An instance of TransactionRequest.
            target: The target server to send this request.
            options: Optional gRPC call options.
            channel_credentials: Channel credentials for secure connection.
            call_credentials: Call credentials for the request.
            insecure: If set to True, use an insecure channel.
            compression: Compression method.
            wait_for_ready: If set to True, wait for the channel to be ready.
            timeout: Timeout for the request.
            metadata: Metadata for the request.

        Returns:
            An instance of TransactionResponse.
        """
        return grpc.experimental.unary_unary(
            request, target, '/TransactionService/sendMoney',
            transaction_pb2.TransactionRequest.SerializeToString,
            transaction_pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_transactions_history(request, target, options=(), channel_credentials=None,
                                 call_credentials=None, insecure=False, compression=None,
                                 wait_for_ready=None, timeout=None, metadata=None):
        """Retrieve the transaction history.

        Args:
            request: An instance of GetALLTransactionsRequest.
            target: The target server to send this request.
            options: Optional gRPC call options.
            channel_credentials: Channel credentials for secure connection.
            call_credentials: Call credentials for the request.
            insecure: If set to True, use an insecure channel.
            compression: Compression method.
            wait_for_ready: If set to True, wait for the channel to be ready.
            timeout: Timeout for the request.
            metadata: Metadata for the request.

        Returns:
            An instance of GetALLTransactionsResponse.
        """
        return grpc.experimental.unary_unary(
            request, target, '/TransactionService/getTransactionsHistory',
            transaction_pb2.GetALLTransactionsRequest.SerializeToString,
            transaction_pb2.GetALLTransactionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def zelle(request, target, options=(), channel_credentials=None,
              call_credentials=None, insecure=False, compression=None,
              wait_for_ready=None, timeout=None, metadata=None):
        """Perform a Zelle transaction.

        Args:
            request: An instance of ZelleRequest.
            target: The target server to send this request.
            options: Optional gRPC call options.
            channel_credentials: Channel credentials for secure connection.
            call_credentials: Call credentials for the request.
            insecure: If set to True, use an insecure channel.
            compression: Compression method.
            wait_for_ready: If set to True, wait for the channel to be ready.
            timeout: Timeout for the request.
            metadata: Metadata for the request.

        Returns:
            An instance of TransactionResponse.
        """
        return grpc.experimental.unary_unary(
            request, target, '/TransactionService/Zelle',
            transaction_pb2.ZelleRequest.SerializeToString,
            transaction_pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_transaction_by_id(request, target, options=(), channel_credentials=None,
                              call_credentials=None, insecure=False, compression=None,
                              wait_for_ready=None, timeout=None, metadata=None):
        """Get a transaction by its ID.

        Args:
            request: An instance of TransactionByIDRequest.
            target: The target server to send this request.
            options: Optional gRPC call options.
            channel_credentials: Channel credentials for secure connection.
            call_credentials: Call credentials for the request.
            insecure: If set to True, use an insecure channel.
            compression: Compression method.
            wait_for_ready: If set to True, wait for the channel to be ready.
            timeout: Timeout for the request.
            metadata: Metadata for the request.

        Returns:
            An instance of Transaction.
        """
        return grpc.experimental.unary_unary(
            request, target, '/TransactionService/getTransactionByID',
            transaction_pb2.TransactionByIDRequest.SerializeToString,
            transaction_pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
