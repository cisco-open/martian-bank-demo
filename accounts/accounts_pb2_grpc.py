# Copyright (c) 2023 Cisco Systems, Inc. and its affiliates All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services.
This module provides client and server classes for the AccountDetailsService using gRPC.
"""
import grpc
import accounts_pb2 

class AccountDetailsServiceStub:
    """
    Stub for the AccountDetailsService.
    Provides methods to interact with the AccountDetailsService.
    """
    def __init__(self, channel):
        """
        Initialize the AccountDetailsServiceStub.

        Args:
            channel (grpc.Channel): A gRPC channel.
        """
        self.get_account_details = channel.unary_unary(
            '/AccountDetailsService/getAccountDetails',
            request_serializer=accounts_pb2.GetAccountDetailRequest.SerializeToString,
            response_deserializer=accounts_pb2.AccountDetail.FromString,
        )
        self.create_account = channel.unary_unary(
            '/AccountDetailsService/createAccount',
            request_serializer=accounts_pb2.CreateAccountRequest.SerializeToString,
            response_deserializer=accounts_pb2.CreateAccountResponse.FromString,
        )
        self.get_accounts = channel.unary_unary(
            '/AccountDetailsService/getAccounts',
            request_serializer=accounts_pb2.GetAccountsRequest.SerializeToString,
            response_deserializer=accounts_pb2.GetAccountsResponse.FromString,
        )

class AccountDetailsServiceServicer:
    """
    Service for managing account details.

    Provides methods to get, create, and list account details.
    """

    @staticmethod
    def get_account_details(request, context):
        """
        Retrieve account details for a given account ID.

        Args:
            request: The request containing the account ID.
            context: gRPC context.

        Raises:
            NotImplementedError: If the method is not yet implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    @staticmethod
    def create_account(request, context):
        """
        Create a new account with the provided details.

        Args:
            request: The request containing account creation details.
            context: gRPC context.

        Raises:
            NotImplementedError: If the method is not yet implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    @staticmethod
    def get_accounts(request, context):
        """
        Retrieve a list of all accounts.

        Args:
            request: The request for getting accounts.
            context: gRPC context.

        Raises:
            NotImplementedError: If the method is not yet implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
def add_account_details_service_servicer_to_server(servicer, server):
    """
    Register the AccountDetailsServiceServicer with the gRPC server.

    Args:
        servicer (AccountDetailsServiceServicer): The servicer instance.
        server (grpc.Server): The gRPC server.
    """
    rpc_method_handlers = {
        'getAccountDetails': grpc.unary_unary_rpc_method_handler(
            servicer.get_account_details,
            request_deserializer=accounts_pb2.GetAccountDetailRequest.FromString,
            response_serializer=accounts_pb2.AccountDetail.SerializeToString,
        ),
        'createAccount': grpc.unary_unary_rpc_method_handler(
            servicer.create_account,
            request_deserializer=accounts_pb2.CreateAccountRequest.FromString,
            response_serializer=accounts_pb2.CreateAccountResponse.SerializeToString,
        ),
        'getAccounts': grpc.unary_unary_rpc_method_handler(
            servicer.get_accounts,
            request_deserializer=accounts_pb2.GetAccountsRequest.FromString,
            response_serializer=accounts_pb2.GetAccountsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'AccountDetailsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
 # This class is part of an EXPERIMENTAL API.
class AccountDetailsService(object):
    """
    AccountDetailsService provides gRPC-based services for managing and retrieving account details.
    """

    GET_ACCOUNT_DETAILS_PATH = '/AccountDetailsService/getAccountDetails'
    CREATE_ACCOUNT_PATH = '/AccountDetailsService/createAccount'
    GET_ACCOUNTS_PATH = '/AccountDetailsService/getAccounts'

    @staticmethod
    def get_account_details(request, target, options=(), channel_credentials=None,
                            call_credentials=None, insecure=False, compression=None,
                            wait_for_ready=None, timeout=None, metadata=None):
        """
        Fetches account details based on the provided request.

        :param request: gRPC request object for getting account details.
        :param target: The server address.
        :other params: Additional gRPC call configurations.
        :return: gRPC response for account details.
        """
        return grpc.experimental.unary_unary(
            request, target, AccountDetailsService.GET_ACCOUNT_DETAILS_PATH,
            accounts_pb2.GetAccountDetailRequest.SerializeToString,
            accounts_pb2.AccountDetail.FromString,
            options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata
        )

    @staticmethod
    def create_account(request, target, options=(), channel_credentials=None,
                       call_credentials=None, insecure=False, compression=None,
                       wait_for_ready=None, timeout=None, metadata=None):
        """
        Handles the creation of a new account.

        :param request: gRPC request object for account creation.
        :param target: The server address.
        :other params: Additional gRPC call configurations.
        :return: gRPC response for account creation.
        """
        return grpc.experimental.unary_unary(
            request, target, AccountDetailsService.CREATE_ACCOUNT_PATH,
            accounts_pb2.CreateAccountRequest.SerializeToString,
            accounts_pb2.CreateAccountResponse.FromString,
            options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata
        )

    @staticmethod
    def get_accounts(request, target, options=(), channel_credentials=None,
                     call_credentials=None, insecure=False, compression=None,
                     wait_for_ready=None, timeout=None, metadata=None):
        """
        Retrieves multiple accounts based on the given request.

        :param request: gRPC request object for retrieving accounts.
        :param target: The server address.
        :other params: Additional gRPC call configurations.
        :return: gRPC response for the accounts retrieval.
        """
        return grpc.experimental.unary_unary(
            request, target, AccountDetailsService.GET_ACCOUNTS_PATH,
            accounts_pb2.GetAccountsRequest.SerializeToString,
            accounts_pb2.GetAccountsResponse.FromString,
            options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata
        )
